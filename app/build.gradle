buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://jitpack.io" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.0.0-alpha1'
        classpath 'com.github.JakeWharton:sdk-manager-plugin:220bf7a88a'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.optimalorange.cooltechnologies"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode version.versionCode
        versionName version.versionName
    }

    signingConfigs {
        debug {
            storeFile file("./debug.jks")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // read local.properties
    Properties localProperties = new Properties()
    localProperties.load(project.rootProject.file('local.properties').newReader('UTF-8'))
    // set string resources according to local.properties
    try {
        addStringResSetInProperties('youku_client_id', localProperties, 'youku.clientId')
        addStringResSetInProperties('umeng_app_key', localProperties, 'umeng.appKey')
    } catch (ResourceException re) {
        String message = "Please set $re.propertyName in local.properties file at root project"
        throw new ResourceException(re.propertyName, message, re)
    }
    if (shouldSetReleaseSigningConfig(localProperties)) {
        // initialize release signingConfig
        android.signingConfigs {
            release {
                storeFile file("./debug.jks")
                storePassword "android"
                keyAlias "androiddebugkey"
                keyPassword "android"
            }
        }
        android.buildTypes.release.signingConfig android.signingConfigs.release
        // set release signingConfig if necessary
        gradle.taskGraph.whenReady { taskGraph ->
            // Executed when the task graph is ready (and can be accessed via taskGraph parameter)
            if (taskGraph.hasTask(project.path + ':assembleRelease')) {
                // Only execute when we are trying to assemble a release build
                setReleaseSigningConfig(localProperties)
            }
        }
    } else {
        System.out.println("WARNING: didn't set signingConfig so that " +
                "you should sign release apk by yourself.")
    }
}

dependencies {
    def supportLibraryVersion = "23.1.1"
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:support-annotations:$supportLibraryVersion"
    compile "com.android.support:support-v4:$supportLibraryVersion"
    compile "com.android.support:appcompat-v7:$supportLibraryVersion"
    compile "com.android.support:design:$supportLibraryVersion"
    compile "com.android.support:percent:$supportLibraryVersion"
    compile "com.android.support:cardview-v7:$supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$supportLibraryVersion"
    compile "com.android.support:support-v13:$supportLibraryVersion"
    compile 'com.mcxiaoke.volley:library:1.0.19@aar'
    compile 'gq.baijie:classbasedviewadapter:0.2.0'
    compile 'com.umeng.update:library:2.5.0'
    compile 'com.umeng.analytics:library:5.4.1'
    compile 'me.zhanghai.android.materialprogressbar:library:1.1.4'
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 代码质量检查 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 摘（窃取:）自 http://blogs.burnsidedigital.com/2014/06/code-quality-and-testing-with-gradle-in-android-projects/?utm_source=tuicool
apply plugin: 'checkstyle'

check.dependsOn 'checkstyle'
task checkstyle(type: Checkstyle) {
//    ignoreFailures = true    // 如果想暂时忽略code style问题，让本行代码生效
    configFile new File(rootDir, "config/checkstyle/checkstyle.xml")

    source 'src'
    include '**/*.java'
    include '**/*.xml'
//    exclude '**/packageName/**', '**/utils/MyFile.java'
    classpath = files()
}

apply plugin: 'pmd'

check.dependsOn 'pmd'
task pmd(type: Pmd) {
//    ignoreFailures = true

    ruleSets = ["java-basic", "java-braces", "java-android"]

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = true
        html.enabled = true
    }
}



// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 工具类和方法 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/**
 * 把properties里设置的propertyName属性的值，添加为Android项目的string resource：R.string.${name}
 *
 * @param name Android项目string resource的name
 */
void addStringResSetInProperties(String name, Properties properties, String propertyName) {
    final String value = properties.getProperty(propertyName)
    if (value == null) {
        throw new ResourceException(propertyName)
    }
    android.applicationVariants.all { variant ->
        variant.resValue('string', name, value)
    }
}

/**
 * @see #setReleaseSigningConfig
 */
boolean shouldSetReleaseSigningConfig(Properties properties) {
    return properties.stringPropertyNames().contains('KEY_STORE_FILE') ||
            hasProperty('KEY_STORE_FILE') || System.getenv().containsKey('KEY_STORE_FILE');
}
/**
 * <p>尝试设置用于sign release apk的signingConfig。应用配置文件中的KEY_STORE_FILE、KEY_STORE_PASSWORD、
 * KEY_ALIAS、KEY_PASSWORD属性，KEY_STORE_FILE是必设项，其它是可选项，会在构建时提示输入没有设置的项目。</p>
 * <p>可以在{@link Properties properties}（如local.properties）、gradle.properties、
 * 环境变量中设置这些属性。配置位置的优先级为properties > gradle.properties > 环境变量。
 * 另外，关于gradle.properties，因为项目目录里的gradle.properties很可能在Version Control System控制中，
 * 其中的内容可能会被公开，所以不建议在项目目录里的gradle.properties设置这些属性；
 * 但是您可以在${user.home}\.gradle\gradle.properties（全局配置）中设置。</p>
 * <p>最多只会应用一个地方的配置，不会合并不同地方的配置（例如即使local.properties没有配置KEY_ALIAS、
 * KEY_PASSWORD，也不会合并local.properties里的KEY_ALIAS、KEY_PASSWORD）。</p>
 *
 * @param properties {@link Properties}属性资源，如local.properties
 * @return 若设置了signingConfig（至少在properties、gradle.properties、环境变量其中一个位置设置了
 * KEY_STORE_FILE），返回true；否则返回false
 */
//参考自：http://stackoverflow.com/questions/18328730/how-to-create-a-release-signed-apk-file-using-gradle
//       https://gist.github.com/gabrielemariotti/6856974
boolean setReleaseSigningConfig(Properties properties) {
    String keyStoreFile, keyStorePassword, keyAlias, keyPassword
    if (properties.stringPropertyNames().contains('KEY_STORE_FILE')) {
        // from properties
        keyStoreFile = properties.getProperty('KEY_STORE_FILE')
        keyStorePassword = properties.getProperty('KEY_STORE_PASSWORD')
        keyAlias = properties.getProperty('KEY_ALIAS')
        keyPassword = properties.getProperty('KEY_PASSWORD')
    } else if (hasProperty('KEY_STORE_FILE')) {
        // or from gradle.properties
        keyStoreFile = KEY_STORE_FILE
        keyStorePassword = hasProperty('KEY_STORE_PASSWORD') ? KEY_STORE_PASSWORD : null
        keyAlias = hasProperty('KEY_ALIAS') ? KEY_ALIAS : null
        keyPassword = hasProperty('KEY_PASSWORD') ? KEY_PASSWORD : null
    } else if (System.getenv().containsKey('KEY_STORE_FILE')) {
        // or from environment variable
        keyStoreFile = System.getenv('KEY_STORE_FILE')
        keyStorePassword = System.getenv('KEY_STORE_PASSWORD')
        keyAlias = System.getenv('KEY_ALIAS')
        keyPassword = System.getenv('KEY_PASSWORD')
    }
    // try to apply them
    if (keyStoreFile != null) {
        android.signingConfigs.release { signingConfig ->
            def readLine = getReader(), readPassword = getPasswordReader()
            signingConfig.storeFile file(keyStoreFile)
            signingConfig.storePassword keyStorePassword != null ? keyStorePassword :
                    readPassword('Enter keystore password: ')
            signingConfig.keyAlias keyAlias != null ? keyAlias : readLine('Enter key alias: ')
            signingConfig.keyPassword keyPassword != null ? keyPassword :
                    readPassword('Enter key password: ')
        }
        return true
    } else {
        return false
    }
}
def getReader() {
    if (System.console() != null) {
        return { String message -> System.console().readLine('\n\$ ' + message) }
    } else {
        return { String message ->
            // change from getPasswordReader()
            def result = null
            new groovy.swing.SwingBuilder().edt {
                dialog(modal: true, // Otherwise the build will continue running before you closed the dialog
                        title: 'Enter', // Dialog title
                        alwaysOnTop: true, // pretty much what the name says
                        resizable: false, // Don't allow the user to resize the dialog
                        locationRelativeTo: null, // Place dialog in center of the screen
                        pack: true, // We need to pack the dialog (so it will take the size of it's children)
                        show: true // Let's show it
                ) {
                    vbox { // Put everything below each other
                        label(text: message)
                        input = textField()
                        button(defaultButton: true, text: 'OK', actionPerformed: {
                            result = input.text; // Set result variable to value of input field
                            dispose(); // Close dialog
                        })
                    } // vbox end
                } // dialog end
            } // edt end
            return result
        }
    }
}
def getPasswordReader() {
    if (System.console() != null) {
        return { String message -> System.console().readPassword('\n\$ ' + message).toString() }
    } else {
        return { String message ->
            // from https://www.timroes.de/2014/01/19/using-password-prompts-with-gradle-build-files/
            def pass = null
            new groovy.swing.SwingBuilder().edt {
                dialog(modal: true, // Otherwise the build will continue running before you closed the dialog
                        title: 'Enter password', // Dialog title
                        alwaysOnTop: true, // pretty much what the name says
                        resizable: false, // Don't allow the user to resize the dialog
                        locationRelativeTo: null, // Place dialog in center of the screen
                        pack: true, // We need to pack the dialog (so it will take the size of it's children)
                        show: true // Let's show it
                ) {
                    vbox { // Put everything below each other
                        label(text: message)
                        input = passwordField()
                        button(defaultButton: true, text: 'OK', actionPerformed: {
                            // Set pass variable to value of input field
                            pass = input.password.toString();
                            Arrays.fill((char[]) input.password, '\0' as char); // more secure
                            dispose(); // Close dialog
                        })
                    } // vbox end
                } // dialog end
            } // edt end
            return pass
        }
    }
}

class ResourceException extends org.gradle.api.resources.ResourceException {

    final String propertyName;

    ResourceException(String propertyName) {
        this.propertyName = propertyName
    }

    ResourceException(String propertyName, String message) {
        super(message)
        this.propertyName = propertyName
    }

    ResourceException(String propertyName, String message, Throwable cause) {
        super(message, cause)
        this.propertyName = propertyName
    }
}
